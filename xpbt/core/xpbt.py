# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _xpbt
else:
    import _xpbt

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _xpbt.delete_SwigPyIterator

    def value(self):
        return _xpbt.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _xpbt.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _xpbt.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _xpbt.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _xpbt.SwigPyIterator_equal(self, x)

    def copy(self):
        return _xpbt.SwigPyIterator_copy(self)

    def next(self):
        return _xpbt.SwigPyIterator_next(self)

    def __next__(self):
        return _xpbt.SwigPyIterator___next__(self)

    def previous(self):
        return _xpbt.SwigPyIterator_previous(self)

    def advance(self, n):
        return _xpbt.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _xpbt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _xpbt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _xpbt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _xpbt.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _xpbt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _xpbt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _xpbt:
_xpbt.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _xpbt.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _xpbt.IntVector___nonzero__(self)

    def __bool__(self):
        return _xpbt.IntVector___bool__(self)

    def __len__(self):
        return _xpbt.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _xpbt.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _xpbt.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _xpbt.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _xpbt.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _xpbt.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _xpbt.IntVector___setitem__(self, *args)

    def pop(self):
        return _xpbt.IntVector_pop(self)

    def append(self, x):
        return _xpbt.IntVector_append(self, x)

    def empty(self):
        return _xpbt.IntVector_empty(self)

    def size(self):
        return _xpbt.IntVector_size(self)

    def swap(self, v):
        return _xpbt.IntVector_swap(self, v)

    def begin(self):
        return _xpbt.IntVector_begin(self)

    def end(self):
        return _xpbt.IntVector_end(self)

    def rbegin(self):
        return _xpbt.IntVector_rbegin(self)

    def rend(self):
        return _xpbt.IntVector_rend(self)

    def clear(self):
        return _xpbt.IntVector_clear(self)

    def get_allocator(self):
        return _xpbt.IntVector_get_allocator(self)

    def pop_back(self):
        return _xpbt.IntVector_pop_back(self)

    def erase(self, *args):
        return _xpbt.IntVector_erase(self, *args)

    def __init__(self, *args):
        _xpbt.IntVector_swiginit(self, _xpbt.new_IntVector(*args))

    def push_back(self, x):
        return _xpbt.IntVector_push_back(self, x)

    def front(self):
        return _xpbt.IntVector_front(self)

    def back(self):
        return _xpbt.IntVector_back(self)

    def assign(self, n, x):
        return _xpbt.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _xpbt.IntVector_resize(self, *args)

    def insert(self, *args):
        return _xpbt.IntVector_insert(self, *args)

    def reserve(self, n):
        return _xpbt.IntVector_reserve(self, n)

    def capacity(self):
        return _xpbt.IntVector_capacity(self)
    __swig_destroy__ = _xpbt.delete_IntVector

# Register IntVector in _xpbt:
_xpbt.IntVector_swigregister(IntVector)

class Distance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def hamming(*args):
        return _xpbt.Distance_hamming(*args)

    def __init__(self):
        _xpbt.Distance_swiginit(self, _xpbt.new_Distance())
    __swig_destroy__ = _xpbt.delete_Distance

# Register Distance in _xpbt:
_xpbt.Distance_swigregister(Distance)

def Distance_hamming(*args):
    return _xpbt.Distance_hamming(*args)

class DnaKmerBloomFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _xpbt.DnaKmerBloomFilter_swiginit(self, _xpbt.new_DnaKmerBloomFilter(*args))
    __swig_destroy__ = _xpbt.delete_DnaKmerBloomFilter

    def add(self, dna):
        return _xpbt.DnaKmerBloomFilter_add(self, dna)

    def contains(self, dna):
        return _xpbt.DnaKmerBloomFilter_contains(self, dna)

    def getKmerK(self):
        return _xpbt.DnaKmerBloomFilter_getKmerK(self)

    def getFalsePositiveRate(self):
        return _xpbt.DnaKmerBloomFilter_getFalsePositiveRate(self)

    def getNumOfHashers(self):
        return _xpbt.DnaKmerBloomFilter_getNumOfHashers(self)

    def getMaxCapacity(self):
        return _xpbt.DnaKmerBloomFilter_getMaxCapacity(self)

    def getStorageBitSize(self):
        return _xpbt.DnaKmerBloomFilter_getStorageBitSize(self)

    def saveToFile(self, fileName):
        return _xpbt.DnaKmerBloomFilter_saveToFile(self, fileName)

# Register DnaKmerBloomFilter in _xpbt:
_xpbt.DnaKmerBloomFilter_swigregister(DnaKmerBloomFilter)

class DnaKmerHasher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getK(self):
        return _xpbt.DnaKmerHasher_getK(self)

    def getM(self):
        return _xpbt.DnaKmerHasher_getM(self)

    def getA(self):
        return _xpbt.DnaKmerHasher_getA(self)

    def getB(self):
        return _xpbt.DnaKmerHasher_getB(self)

    def getIndexPermutations(self, result):
        return _xpbt.DnaKmerHasher_getIndexPermutations(self, result)

    def __init__(self, *args):
        _xpbt.DnaKmerHasher_swiginit(self, _xpbt.new_DnaKmerHasher(*args))
    __swig_destroy__ = _xpbt.delete_DnaKmerHasher

    def hash(self, kmer):
        return _xpbt.DnaKmerHasher_hash(self, kmer)

    def str(self):
        return _xpbt.DnaKmerHasher_str(self)

# Register DnaKmerHasher in _xpbt:
_xpbt.DnaKmerHasher_swigregister(DnaKmerHasher)

class FastQ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_xpbt.FastQ_id_get)
    seq = property(_xpbt.FastQ_seq_get)
    qual = property(_xpbt.FastQ_qual_get)
    desc = property(_xpbt.FastQ_desc_get)
    length = property(_xpbt.FastQ_length_get)

    def __init__(self, recordId, recordSeq, recordDesc, recordQual):
        _xpbt.FastQ_swiginit(self, _xpbt.new_FastQ(recordId, recordSeq, recordDesc, recordQual))

    def reverseComplement(self, *args):
        return _xpbt.FastQ_reverseComplement(self, *args)

    def reverse(self, *args):
        return _xpbt.FastQ_reverse(self, *args)

    def __call__(self, *args):
        return _xpbt.FastQ___call__(self, *args)

    def hammingDistance(self, compareTo):
        return _xpbt.FastQ_hammingDistance(self, compareTo)

    def str(self):
        return _xpbt.FastQ_str(self)
    __swig_destroy__ = _xpbt.delete_FastQ

# Register FastQ in _xpbt:
_xpbt.FastQ_swigregister(FastQ)

class FastQIntegrator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def add(self, read):
        return _xpbt.FastQIntegrator_add(self, read)

    @staticmethod
    def phred2p(c):
        return _xpbt.FastQIntegrator_phred2p(c)

    @staticmethod
    def p2phred(p):
        return _xpbt.FastQIntegrator_p2phred(p)

    @staticmethod
    def count2ascii(c):
        return _xpbt.FastQIntegrator_count2ascii(c)

    @staticmethod
    def ascii2count(c):
        return _xpbt.FastQIntegrator_ascii2count(c)

    def integrate(self, newId):
        return _xpbt.FastQIntegrator_integrate(self, newId)

    @staticmethod
    def integratePair(newId, record1, record2):
        return _xpbt.FastQIntegrator_integratePair(newId, record1, record2)

    def __init__(self):
        _xpbt.FastQIntegrator_swiginit(self, _xpbt.new_FastQIntegrator())
    __swig_destroy__ = _xpbt.delete_FastQIntegrator

# Register FastQIntegrator in _xpbt:
_xpbt.FastQIntegrator_swigregister(FastQIntegrator)

def FastQIntegrator_phred2p(c):
    return _xpbt.FastQIntegrator_phred2p(c)

def FastQIntegrator_p2phred(p):
    return _xpbt.FastQIntegrator_p2phred(p)

def FastQIntegrator_count2ascii(c):
    return _xpbt.FastQIntegrator_count2ascii(c)

def FastQIntegrator_ascii2count(c):
    return _xpbt.FastQIntegrator_ascii2count(c)

def FastQIntegrator_integratePair(newId, record1, record2):
    return _xpbt.FastQIntegrator_integratePair(newId, record1, record2)

class ReadStitcher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _xpbt.ReadStitcher_swiginit(self, _xpbt.new_ReadStitcher(*args))

    def lazyStitch(self, newId, read1, read2):
        return _xpbt.ReadStitcher_lazyStitch(self, newId, read1, read2)
    __swig_destroy__ = _xpbt.delete_ReadStitcher

# Register ReadStitcher in _xpbt:
_xpbt.ReadStitcher_swigregister(ReadStitcher)

class UnableToStitchException(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _xpbt.UnableToStitchException_swiginit(self, _xpbt.new_UnableToStitchException())
    __swig_destroy__ = _xpbt.delete_UnableToStitchException

# Register UnableToStitchException in _xpbt:
_xpbt.UnableToStitchException_swigregister(UnableToStitchException)

class RedBlackIntervalTree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def check(self):
        return _xpbt.RedBlackIntervalTree_check(self)

    def insert(self, z):
        return _xpbt.RedBlackIntervalTree_insert(self, z)

    def search(self, value, result):
        return _xpbt.RedBlackIntervalTree_search(self, value, result)

    def __init__(self):
        _xpbt.RedBlackIntervalTree_swiginit(self, _xpbt.new_RedBlackIntervalTree())
    __swig_destroy__ = _xpbt.delete_RedBlackIntervalTree

# Register RedBlackIntervalTree in _xpbt:
_xpbt.RedBlackIntervalTree_swigregister(RedBlackIntervalTree)

class RedBlackIntervalTreeNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    left = property(_xpbt.RedBlackIntervalTreeNode_left_get, _xpbt.RedBlackIntervalTreeNode_left_set)
    right = property(_xpbt.RedBlackIntervalTreeNode_right_get, _xpbt.RedBlackIntervalTreeNode_right_set)
    parent = property(_xpbt.RedBlackIntervalTreeNode_parent_get, _xpbt.RedBlackIntervalTreeNode_parent_set)
    red = property(_xpbt.RedBlackIntervalTreeNode_red_get, _xpbt.RedBlackIntervalTreeNode_red_set)
    low = property(_xpbt.RedBlackIntervalTreeNode_low_get, _xpbt.RedBlackIntervalTreeNode_low_set)
    high = property(_xpbt.RedBlackIntervalTreeNode_high_get, _xpbt.RedBlackIntervalTreeNode_high_set)
    max = property(_xpbt.RedBlackIntervalTreeNode_max_get, _xpbt.RedBlackIntervalTreeNode_max_set)

    def __init__(self, low, high):
        _xpbt.RedBlackIntervalTreeNode_swiginit(self, _xpbt.new_RedBlackIntervalTreeNode(low, high))

    def updateMax(self, *args):
        return _xpbt.RedBlackIntervalTreeNode_updateMax(self, *args)

    def getAddress(self):
        return _xpbt.RedBlackIntervalTreeNode_getAddress(self)
    __swig_destroy__ = _xpbt.delete_RedBlackIntervalTreeNode

# Register RedBlackIntervalTreeNode in _xpbt:
_xpbt.RedBlackIntervalTreeNode_swigregister(RedBlackIntervalTreeNode)

class Sequence(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def reverse(seq):
        return _xpbt.Sequence_reverse(seq)

    @staticmethod
    def complementDna(dna):
        return _xpbt.Sequence_complementDna(dna)

    @staticmethod
    def complementRna(rna):
        return _xpbt.Sequence_complementRna(rna)

    @staticmethod
    def reverseComplementDna(dna):
        return _xpbt.Sequence_reverseComplementDna(dna)

    @staticmethod
    def reverseComplementRna(rna):
        return _xpbt.Sequence_reverseComplementRna(rna)

    @staticmethod
    def randomDnaKmer(k):
        return _xpbt.Sequence_randomDnaKmer(k)

    @staticmethod
    def randomRnaKmer(k):
        return _xpbt.Sequence_randomRnaKmer(k)

    def __init__(self):
        _xpbt.Sequence_swiginit(self, _xpbt.new_Sequence())
    __swig_destroy__ = _xpbt.delete_Sequence

# Register Sequence in _xpbt:
_xpbt.Sequence_swigregister(Sequence)

def Sequence_reverse(seq):
    return _xpbt.Sequence_reverse(seq)

def Sequence_complementDna(dna):
    return _xpbt.Sequence_complementDna(dna)

def Sequence_complementRna(rna):
    return _xpbt.Sequence_complementRna(rna)

def Sequence_reverseComplementDna(dna):
    return _xpbt.Sequence_reverseComplementDna(dna)

def Sequence_reverseComplementRna(rna):
    return _xpbt.Sequence_reverseComplementRna(rna)

def Sequence_randomDnaKmer(k):
    return _xpbt.Sequence_randomDnaKmer(k)

def Sequence_randomRnaKmer(k):
    return _xpbt.Sequence_randomRnaKmer(k)

class ValueError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, error):
        _xpbt.ValueError_swiginit(self, _xpbt.new_ValueError(error))

    def what(self):
        return _xpbt.ValueError_what(self)
    __swig_destroy__ = _xpbt.delete_ValueError

# Register ValueError in _xpbt:
_xpbt.ValueError_swigregister(ValueError)

class Zeronate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    chr = property(_xpbt.Zeronate_chr_get)
    start = property(_xpbt.Zeronate_start_get)
    stop = property(_xpbt.Zeronate_stop_get)
    strand = property(_xpbt.Zeronate_strand_get)

    def __init__(self, chr, start, stop, strand):
        _xpbt.Zeronate_swiginit(self, _xpbt.new_Zeronate(chr, start, stop, strand))

    @staticmethod
    def parse(coordinate):
        return _xpbt.Zeronate_parse(coordinate)
    __swig_destroy__ = _xpbt.delete_Zeronate

# Register Zeronate in _xpbt:
_xpbt.Zeronate_swigregister(Zeronate)

def Zeronate_parse(coordinate):
    return _xpbt.Zeronate_parse(coordinate)

class RedBlackIntervalTreeNodeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _xpbt.RedBlackIntervalTreeNodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _xpbt.RedBlackIntervalTreeNodeVector___nonzero__(self)

    def __bool__(self):
        return _xpbt.RedBlackIntervalTreeNodeVector___bool__(self)

    def __len__(self):
        return _xpbt.RedBlackIntervalTreeNodeVector___len__(self)

    def __getslice__(self, i, j):
        return _xpbt.RedBlackIntervalTreeNodeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _xpbt.RedBlackIntervalTreeNodeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _xpbt.RedBlackIntervalTreeNodeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _xpbt.RedBlackIntervalTreeNodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _xpbt.RedBlackIntervalTreeNodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _xpbt.RedBlackIntervalTreeNodeVector___setitem__(self, *args)

    def pop(self):
        return _xpbt.RedBlackIntervalTreeNodeVector_pop(self)

    def append(self, x):
        return _xpbt.RedBlackIntervalTreeNodeVector_append(self, x)

    def empty(self):
        return _xpbt.RedBlackIntervalTreeNodeVector_empty(self)

    def size(self):
        return _xpbt.RedBlackIntervalTreeNodeVector_size(self)

    def swap(self, v):
        return _xpbt.RedBlackIntervalTreeNodeVector_swap(self, v)

    def begin(self):
        return _xpbt.RedBlackIntervalTreeNodeVector_begin(self)

    def end(self):
        return _xpbt.RedBlackIntervalTreeNodeVector_end(self)

    def rbegin(self):
        return _xpbt.RedBlackIntervalTreeNodeVector_rbegin(self)

    def rend(self):
        return _xpbt.RedBlackIntervalTreeNodeVector_rend(self)

    def clear(self):
        return _xpbt.RedBlackIntervalTreeNodeVector_clear(self)

    def get_allocator(self):
        return _xpbt.RedBlackIntervalTreeNodeVector_get_allocator(self)

    def pop_back(self):
        return _xpbt.RedBlackIntervalTreeNodeVector_pop_back(self)

    def erase(self, *args):
        return _xpbt.RedBlackIntervalTreeNodeVector_erase(self, *args)

    def __init__(self, *args):
        _xpbt.RedBlackIntervalTreeNodeVector_swiginit(self, _xpbt.new_RedBlackIntervalTreeNodeVector(*args))

    def push_back(self, x):
        return _xpbt.RedBlackIntervalTreeNodeVector_push_back(self, x)

    def front(self):
        return _xpbt.RedBlackIntervalTreeNodeVector_front(self)

    def back(self):
        return _xpbt.RedBlackIntervalTreeNodeVector_back(self)

    def assign(self, n, x):
        return _xpbt.RedBlackIntervalTreeNodeVector_assign(self, n, x)

    def resize(self, *args):
        return _xpbt.RedBlackIntervalTreeNodeVector_resize(self, *args)

    def insert(self, *args):
        return _xpbt.RedBlackIntervalTreeNodeVector_insert(self, *args)

    def reserve(self, n):
        return _xpbt.RedBlackIntervalTreeNodeVector_reserve(self, n)

    def capacity(self):
        return _xpbt.RedBlackIntervalTreeNodeVector_capacity(self)
    __swig_destroy__ = _xpbt.delete_RedBlackIntervalTreeNodeVector

# Register RedBlackIntervalTreeNodeVector in _xpbt:
_xpbt.RedBlackIntervalTreeNodeVector_swigregister(RedBlackIntervalTreeNodeVector)



